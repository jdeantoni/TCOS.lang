testSimpleL
import "testSoSLang/src/language-server/simple-l.langium"



open Model { 


                            when starts 
    ------------------------------------------------------------ statementsInOrder1
      <this,σ> ~> statements->sequential.foreach(s => <s,σ>)



         when statements.last().terminates                 
    -------------------------------------------                 finishModel
              <this,σ> ~> terminates

}

open Bloc {

                          when starts
    ----------------------------------------------------------- startsBloc
        <this,σ> ~> statements->sequential.foreach(s => <s,σ>)

  
          when lastOf(statements.terminates)   
    -------------------------------------------                 finishBloc
              <this,σ> ~> terminates
}

open ParallelBloc {

                          when starts
    ----------------------------------------------------------- startsParallelBloc
        <this,σ> ~> statements->concurrent.foreach(s => <s,σ>)



       when lastOf(statements.terminates) 
    -----------------------------------------                   finishParallelBloc
                  <this,σ> ~> terminates

}

open Variable {

    var currentValue:integer = initialValue;


                    when starts
    ---------------------------------------------               initializeVar
     <this,σ> ~> currentValue := initialValue;
                 terminates

}

open VarRef {
                when starts
    -------------------------------------                       accessVarRef
         <this,σ> ~> terminates(theVar.currentValue)
}

open Plus {
   
              when starts
    -------------------------------------                       startPlus
      <this,σ> ~> emits right.starts;
                  emits left.starts

    when (<right,σ> -> n2:integer ^ <left,σ> -> n1:integer)
    ----------------------------------------------              evaluatePlus
             <this,σ> ~> terminates(n1 + n2)
                        
}


open If {

              when (starts ^
              <cond,σ> -> true) 
    -----------------------------------                         condTrue
      <this,σ> ~> <then.starts, σ>


              when (starts ^
              <cond,σ> -> false)
    -----------------------------------                         condFalse
      <this,σ> ~> <else.starts,σ>

        when(then.terminates v else.terminates)
    ---------------------------------------------               condEnd
               <this,σ> ~> terminates

} 

open Assignment {
          when <expr,σ> -> resRight: integer                       
    -----------------------------------------------             executeAssignment
      <this,σ> ~> variable.currentValue := resRight;
                  terminates
}
