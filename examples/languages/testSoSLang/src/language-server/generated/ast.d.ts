/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';
export type BooleanExpression = BooleanConst | Conjunction | Disjunction;
export declare const BooleanExpression = "BooleanExpression";
export declare function isBooleanExpression(item: unknown): item is BooleanExpression;
export type Expr = BooleanExpression | Plus | VarRef;
export declare const Expr = "Expr";
export declare function isExpr(item: unknown): item is Expr;
export type Statement = Assignment | Bloc | Expr | FunctionCall | If | ParallelBloc | PeriodicBloc | Variable | While;
export declare const Statement = "Statement";
export declare function isStatement(item: unknown): item is Statement;
export interface Assignment extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'Assignment';
    expr: Expr;
    variable: Reference<Variable>;
}
export declare const Assignment = "Assignment";
export declare function isAssignment(item: unknown): item is Assignment;
export interface Bloc extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'Bloc';
    statements: Array<Statement>;
}
export declare const Bloc = "Bloc";
export declare function isBloc(item: unknown): item is Bloc;
export interface BooleanConst extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'BooleanConst';
    value: 'false' | 'true';
}
export declare const BooleanConst = "BooleanConst";
export declare function isBooleanConst(item: unknown): item is BooleanConst;
export interface Conjunction extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'Conjunction';
    lhs: BooleanExpression;
    rhs: BooleanExpression;
}
export declare const Conjunction = "Conjunction";
export declare function isConjunction(item: unknown): item is Conjunction;
export interface Disjunction extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'Disjunction';
    lhs: BooleanExpression;
    rhs: BooleanExpression;
}
export declare const Disjunction = "Disjunction";
export declare function isDisjunction(item: unknown): item is Disjunction;
export interface FunctionCall extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'FunctionCall';
    args: Array<Expr>;
    theFunction: Reference<FunctionDef>;
}
export declare const FunctionCall = "FunctionCall";
export declare function isFunctionCall(item: unknown): item is FunctionCall;
export interface FunctionDef extends AstNode {
    readonly $container: Model;
    readonly $type: 'FunctionDef';
    body: Bloc;
    name: string;
    params: Array<string>;
}
export declare const FunctionDef = "FunctionDef";
export declare function isFunctionDef(item: unknown): item is FunctionDef;
export interface If extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'If';
    cond: VarRef;
    else: Bloc;
    then: Bloc;
}
export declare const If = "If";
export declare function isIf(item: unknown): item is If;
export interface Model extends AstNode {
    readonly $type: 'Model';
    functionDefs: Array<FunctionDef>;
    statements: Array<Statement>;
}
export declare const Model = "Model";
export declare function isModel(item: unknown): item is Model;
export interface ParallelBloc extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'ParallelBloc';
    statements: Array<Statement>;
}
export declare const ParallelBloc = "ParallelBloc";
export declare function isParallelBloc(item: unknown): item is ParallelBloc;
export interface PeriodicBloc extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'PeriodicBloc';
    bloc: Bloc;
    time: number;
}
export declare const PeriodicBloc = "PeriodicBloc";
export declare function isPeriodicBloc(item: unknown): item is PeriodicBloc;
export interface Plus extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'Plus';
    left: Expr;
    right: Expr;
}
export declare const Plus = "Plus";
export declare function isPlus(item: unknown): item is Plus;
export interface Variable extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'Variable';
    initialValue?: number;
    name: string;
}
export declare const Variable = "Variable";
export declare function isVariable(item: unknown): item is Variable;
export interface VarRef extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'VarRef';
    theVar: Reference<Variable>;
}
export declare const VarRef = "VarRef";
export declare function isVarRef(item: unknown): item is VarRef;
export interface While extends AstNode {
    readonly $container: Assignment | Bloc | Conjunction | Disjunction | FunctionCall | FunctionDef | If | Model | ParallelBloc | PeriodicBloc | Plus | While;
    readonly $type: 'While';
    body: Bloc;
    cond: VarRef;
}
export declare const While = "While";
export declare function isWhile(item: unknown): item is While;
export interface SimpleLAstType {
    Assignment: Assignment;
    Bloc: Bloc;
    BooleanConst: BooleanConst;
    BooleanExpression: BooleanExpression;
    Conjunction: Conjunction;
    Disjunction: Disjunction;
    Expr: Expr;
    FunctionCall: FunctionCall;
    FunctionDef: FunctionDef;
    If: If;
    Model: Model;
    ParallelBloc: ParallelBloc;
    PeriodicBloc: PeriodicBloc;
    Plus: Plus;
    Statement: Statement;
    VarRef: VarRef;
    Variable: Variable;
    While: While;
}
export declare class SimpleLAstReflection extends AbstractAstReflection {
    getAllTypes(): string[];
    protected computeIsSubtype(subtype: string, supertype: string): boolean;
    getReferenceType(refInfo: ReferenceInfo): string;
    getTypeMetaData(type: string): TypeMetaData;
}
export declare const reflection: SimpleLAstReflection;
