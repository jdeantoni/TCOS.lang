digraph G {
  "0" [label="0:startsModel0_0_7_7" shape="ellipse" ];
  "1" [label="1:terminatesModel0_0_7_7" shape="ellipse" ];
  "2" [label="2:startsarray0_0_0_10_1_0_1_10_3_0_5_3_7_0_7_7" shape="ellipse" ];
  "3" [label="3:startsVariable0_0_0_10:
void functioninit3Variable(){
sigma[\"Variable0_0_0_10currentValue\"] = new int();
}" shape="ellipse" ];
  "4" [label="4:terminatesVariable0_0_0_10" shape="ellipse" ];
  "5" [label="5:initializeVarStateModificationNode:
void function5initializeVar(){
int Variable0_0_0_101377 = 1; //undefined
//TODO: fix this and avoid memory leak by deleting, constructing appropriately
                const std::lock_guard<std::mutex> lock(sigma_mutex);
                (*((int*)sigma[\"Variable0_0_0_10currentValue\"])) = Variable0_0_0_101377;
}" shape="ellipse" ];
  "6" [label="6:startsVariable1_0_1_10:
void functioninit6Variable(){
sigma[\"Variable1_0_1_10currentValue\"] = new int();
}" shape="ellipse" ];
  "7" [label="7:terminatesVariable1_0_1_10" shape="ellipse" ];
  "8" [label="8:initializeVarStateModificationNode:
void function8initializeVar(){
int Variable1_0_1_101377 = 0; //undefined
//TODO: fix this and avoid memory leak by deleting, constructing appropriately
                const std::lock_guard<std::mutex> lock(sigma_mutex);
                (*((int*)sigma[\"Variable1_0_1_10currentValue\"])) = Variable1_0_1_101377;
}" shape="ellipse" ];
  "9" [label="9:startsPeriodicBloc3_0_5_3:
void function9periodicStart(){
sigma[\"PeriodicBloc3_0_5_3blocTrigger\"] = new int(1000);
}" shape="ellipse" ];
  "10" [label="10:terminatesPeriodicBloc3_0_5_3" shape="ellipse" ];
  "11" [label="11:startsblocTriggerPeriodicBloc3_0_5_3:
void functionstarts11blocTrigger(){
std::this_thread::sleep_for(1000ms);
}" shape="ellipse" ];
  "12" [label="12:terminatesblocTriggerPeriodicBloc3_0_5_3" shape="ellipse" ];
  "13" [label="13:periodicBodyStartForkNode" shape="triangle" ];
  "14" [label="14:startsBloc3_14_5_3" shape="ellipse" ];
  "15" [label="15:terminatesBloc3_14_5_3" shape="ellipse" ];
  "16" [label="16:startsarray4_4_4_16" shape="ellipse" ];
  "17" [label="17:startsAssignment4_4_4_16" shape="ellipse" ];
  "18" [label="18:terminatesAssignment4_4_4_16" shape="ellipse" ];
  "19" [label="19:startsPlus4_9_4_16" shape="ellipse" ];
  "20" [label="20:terminatesPlus4_9_4_16" shape="ellipse" ];
  "21" [label="21:startPlusForkNode" shape="triangle" ];
  "22" [label="22:startsVarRef4_13_4_15:
int function22accessVarRef(){
const std::lock_guard<std::mutex> lock(sigma_mutex);
int VarRef4_13_4_151583 = *(int *) sigma[\"Variable0_0_0_10currentValue\"];//currentValue}
int VarRef4_13_4_15terminates =  VarRef4_13_4_151583;
return VarRef4_13_4_15terminates;
}" shape="ellipse" ];
  "23" [label="23:terminatesVarRef4_13_4_15" shape="ellipse" ];
  "24" [label="24:startsVarRef4_10_4_12:
int function24accessVarRef(){
const std::lock_guard<std::mutex> lock(sigma_mutex);
int VarRef4_10_4_121583 = *(int *) sigma[\"Variable0_0_0_10currentValue\"];//currentValue}
int VarRef4_10_4_12terminates =  VarRef4_10_4_121583;
return VarRef4_10_4_12terminates;
}" shape="ellipse" ];
  "25" [label="25:terminatesVarRef4_10_4_12" shape="ellipse" ];
  "26" [label="26:andJoinNodeVarRef4_13_4_15:
int function26finishPlus(int n2, int n1){
int Plus4_9_4_164243 = n2;
int Plus4_9_4_164268 = n1;
int Plus4_9_4_164387 = n1; // was Plus4_9_4_164268; but using the parameter name now
int Plus4_9_4_164392 = n2; // was Plus4_9_4_164243; but using the parameter name now
int Plus4_9_4_164386 = Plus4_9_4_164387 + Plus4_9_4_164392;
int Plus4_9_4_16terminates =  Plus4_9_4_164386;
return Plus4_9_4_16terminates;
}" shape="invtriangle" ];
  "27" [label="27:executeAssignment2StateModificationNode:
void function27executeAssignment2(int resRight){
int Assignment4_4_4_162524 = resRight; // was Assignment4_4_4_162358; but using the parameter name now
//TODO: fix this and avoid memory leak by deleting, constructing appropriately
                const std::lock_guard<std::mutex> lock(sigma_mutex);                                    
                (*((int*)sigma[\"Variable0_0_0_10currentValue\"])) = Assignment4_4_4_162524;
}" shape="ellipse" ];
  "28" [label="28:terminatesarray4_4_4_16" shape="ellipse" ];
  "29" [label="29:orJoinNodeblocTriggerPeriodicBloc3_0_5_3" shape="invtriangle" style="filled" fillcolor="lightblue"];
  "30" [label="30:startsAssignment7_0_7_7" shape="ellipse" ];
  "31" [label="31:terminatesAssignment7_0_7_7" shape="ellipse" ];
  "32" [label="32:startsVarRef7_5_7_7:
int function32accessVarRef(){
const std::lock_guard<std::mutex> lock(sigma_mutex);
int VarRef7_5_7_71583 = *(int *) sigma[\"Variable0_0_0_10currentValue\"];//currentValue}
int VarRef7_5_7_7terminates =  VarRef7_5_7_71583;
return VarRef7_5_7_7terminates;
}" shape="ellipse" ];
  "33" [label="33:terminatesVarRef7_5_7_7" shape="ellipse" ];
  "34" [label="34:executeAssignment2StateModificationNode:
void function34executeAssignment2(int resRight){
int Assignment7_0_7_72524 = resRight; // was Assignment7_0_7_72358; but using the parameter name now
//TODO: fix this and avoid memory leak by deleting, constructing appropriately
                const std::lock_guard<std::mutex> lock(sigma_mutex);                                    
                (*((int*)sigma[\"Variable1_0_1_10currentValue\"])) = Assignment7_0_7_72524;
}" shape="ellipse" ];
  "35" [label="35:terminatesarray0_0_0_10_1_0_1_10_3_0_5_3_7_0_7_7" shape="ellipse" ];
  "0" -> "2" [label=""];
  "3" -> "5" [label=""];
  "5" -> "4" [label=""];
  "2" -> "3" [label=""];
  "6" -> "8" [label=""];
  "8" -> "7" [label=""];
  "4" -> "6" [label=""];
  "9" -> "29" [label=""];
  "11" -> "12" [label=""];
  "12" -> "13" [label=""];
  "14" -> "16" [label=""];
  "19" -> "21" [label=""];
  "22" -> "23" [label=""];
  "21" -> "22" [label=""];
  "24" -> "25" [label=""];
  "21" -> "24" [label=""];
  "23" -> "26" [label=""];
  "25" -> "26" [label=""];
  "26" -> "20" [label=""];
  "17" -> "19" [label=""];
  "20" -> "27" [label=""];
  "27" -> "18" [label=""];
  "16" -> "17" [label=""];
  "18" -> "28" [label=""];
  "28" -> "15" [label=""];
  "13" -> "14" [label=""];
  "13" -> "29" [label=""];
  "29" -> "11" [label=""];
  "7" -> "9" [label=""];
  "32" -> "33" [label=""];
  "30" -> "32" [label=""];
  "33" -> "34" [label=""];
  "34" -> "31" [label=""];
  "10" -> "30" [label=""];
  "31" -> "35" [label=""];
  "35" -> "1" [label=""];
}